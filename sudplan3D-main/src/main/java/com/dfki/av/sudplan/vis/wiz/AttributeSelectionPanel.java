/*
 *  DataSourceSelectionPanel.java 
 *
 *  Created by DFKI AV on 01.01.2012.
 *  Copyright (c) 2011-2012 DFKI GmbH, Kaiserslautern. All rights reserved.
 *  Use is subject to license terms.
 */
package com.dfki.av.sudplan.vis.wiz;

import com.dfki.av.sudplan.vis.io.shapefile.Shapefile;
import com.dfki.av.sudplan.vis.Settings;
import com.dfki.av.utils.AVUtils;
import java.awt.Dimension;
import java.io.File;
import java.net.URI;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.TableModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public final class AttributeSelectionPanel extends JPanel {

    private final static Logger log = LoggerFactory.getLogger(AttributeSelectionPanel.class);
    private AttributeTableModel tableModel;
    private JTable table;
    private JScrollPane spAttributeTable;

    /**
     * Creates new form DataSourceSelectionPanel
     */
    public AttributeSelectionPanel() {
        initComponents();
        // init my components here:

        this.tableModel = new AttributeTableModel();
        this.table = new JTable(tableModel);
        this.table.setPreferredScrollableViewportSize(new Dimension(500, 70));
        this.table.setFillsViewportHeight(true);
        this.spAttributeTable = new JScrollPane(this.table);
        jPanel2.add(this.spAttributeTable);
    }

    @Override
    public String getName() {
        return "Select Attributes";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

    public List getSelectedAttributes() {
        ArrayList<String> selectedAttr = new ArrayList<String>();
        for (int rowId = 0; rowId < tableModel.getRowCount(); rowId++) {
            Boolean isSelected = (Boolean) tableModel.getValueAt(rowId, 0);
            if (isSelected) {
                String attr = (String) tableModel.getValueAt(rowId, 1);
                selectedAttr.add(attr);
                log.debug("Selected: {}", attr);
            }
        }
        return selectedAttr;
    }

    public void setSelectedDataSource(Object o) {
        ShapefileLoader shapefileLoader = new ShapefileLoader(o);
        shapefileLoader.execute();
    }

    /**
     *
     * @author Daniel Steffen <daniel.steffen at dfki.de>
     */
    public class ShapefileLoader extends SwingWorker<Map<String, Object>, Void> {

        /*
         * Logger.
         */
        private final Logger log = LoggerFactory.getLogger(ShapefileLoader.class);
        /**
         * Data source for the layer to be produced.
         */
        private Object dataSource;

        public ShapefileLoader(Object data) {
            this.dataSource = data;
        }

        @Override
        protected Map<String, Object> doInBackground() throws Exception {
            File tmpFile = null;
            if (dataSource instanceof File) {
                tmpFile = (File) dataSource;
            } else if (dataSource instanceof URL) {
                URL url = (URL) dataSource;
                tmpFile = AVUtils.DownloadFileToDirectory(url, Settings.SUDPLAN_3D_USER_HOME);
            } else if (dataSource instanceof URI) {
                URI uri = (URI) dataSource;
                tmpFile = AVUtils.DownloadFileToDirectory(uri.toURL(), Settings.SUDPLAN_3D_USER_HOME);
            } else {
                log.error("No valid data source."
                        + "Must be of type File, URL, or URI.");
                throw new IllegalArgumentException("No valid data source for LayerWorker. "
                        + "Must be of type File, URL, or URI.");
            }

            String fileName = tmpFile.getName();
            File file = null;
            String fileExtension = fileName.substring(fileName.length() - 4);
            if (fileExtension.equalsIgnoreCase(".zip")) {
                AVUtils.Unzip(tmpFile, Settings.SUDPLAN_3D_USER_HOME);
                // Here, we assume that the name of the shape file equals
                // the name of the zip and vice versa.
                String shpFileName = fileName.replace(fileExtension, ".shp");
                file = new File(Settings.SUDPLAN_3D_USER_HOME + File.separator + shpFileName);
                log.debug("Source file: {}", file.getAbsolutePath());
            } else if (fileExtension.equalsIgnoreCase(".shp")) {
                file = tmpFile;
            } else {
                log.debug("Data type not supported yet.");
            }

            Shapefile shpFile = new Shapefile(file.getAbsolutePath());

            return shpFile.getAttributes();
        }

        @Override
        protected void done() {
            try {
                Map<String, Object> attributes = get();
                TableModel tModel = table.getModel();
                if (tModel instanceof AttributeTableModel) {
                    AttributeTableModel model = (AttributeTableModel) tModel;
                    model.removeAllRows();
                    for (Map.Entry<String, Object> entry : attributes.entrySet()) {
                        Object[] rowData = new Object[model.getColumnCount()];
                        rowData[0] = false;
                        rowData[1] = entry.getKey();
                        rowData[2] = entry.getValue();
                        model.addRow(rowData);
                    }
                }
                table.updateUI();
            } catch (InterruptedException ex) {
                log.error(ex.toString());
            } catch (ExecutionException ex) {
                log.error(ex.toString());
            }
            jPanel2.updateUI();
        }
    }
}
