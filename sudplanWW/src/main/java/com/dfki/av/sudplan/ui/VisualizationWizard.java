/*
 * VisualizationWizard.java
 *
 * Created on 14.10.2011, 09:19:55
 */
package com.dfki.av.sudplan.ui;

import com.dfki.av.sudplan.ui.table.ShapefileTableModel;
import gov.nasa.worldwind.formats.shapefile.Shapefile;
import gov.nasa.worldwind.formats.shapefile.ShapefileRecord;
import gov.nasa.worldwind.layers.RenderableLayer;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Daniel Steffen <daniel.steffen at dfki.de>
 */
public class VisualizationWizard extends javax.swing.JDialog {

    /*
     * Logger.
     */
    private final Logger log = LoggerFactory.getLogger(getClass());
    private JTable tabAttributes;
    private JScrollPane spAttributeTable;
    private ShapefileTableModel tableModel;
    private static String[] visAlorithms = new String[]{
        "3D Visualization",
        "2D Visualization"
    };

    /** Creates new form VisualizationWizard */
    public VisualizationWizard(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();
        // init my components here:
        this.tableModel = new ShapefileTableModel();
        this.tabAttributes = new JTable(tableModel);
        this.tabAttributes.setPreferredScrollableViewportSize(new Dimension(500, 70));
        this.tabAttributes.setFillsViewportHeight(true);

        TableColumn tc = this.tabAttributes.getColumnModel().getColumn(0);
        tc = this.tabAttributes.getColumnModel().getColumn(3);
        JComboBox comboBox = new JComboBox();
        for (String string : visAlorithms) {
            comboBox.addItem(string);
        }
        comboBox.setSelectedIndex(0);
        tc.setCellEditor(new DefaultCellEditor(comboBox));
        this.spAttributeTable = new JScrollPane(this.tabAttributes);

        pAttributes.add(this.spAttributeTable);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pButtons = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnFinish = new javax.swing.JButton();
        pMain = new javax.swing.JPanel();
        pWizard1 = new javax.swing.JPanel();
        pFileChooser = new javax.swing.JPanel();
        lFile = new javax.swing.JLabel();
        txtFile = new javax.swing.JTextField();
        btnFile = new javax.swing.JButton();
        pAttributes = new javax.swing.JPanel();
        pWizard2 = new javax.swing.JPanel();

        setTitle("VisWiz - DFKI (c) 2011");

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/dfki/av/sudplan/ui/Bundle"); // NOI18N
        btnCancel.setText(bundle.getString("VisualizationWizard.btnCancel.txt")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnNext.setText("Next >");
        btnNext.setEnabled(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnBack.setText("< Back");
        btnBack.setEnabled(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnFinish.setText("Finish");
        btnFinish.setEnabled(false);
        btnFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pButtonsLayout = new javax.swing.GroupLayout(pButtons);
        pButtons.setLayout(pButtonsLayout);
        pButtonsLayout.setHorizontalGroup(
            pButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pButtonsLayout.createSequentialGroup()
                .addContainerGap(378, Short.MAX_VALUE)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNext)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnFinish)
                .addContainerGap())
        );
        pButtonsLayout.setVerticalGroup(
            pButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFinish, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pMain.setLayout(new java.awt.CardLayout());

        pFileChooser.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("VisualizationWizard.titleFile.txt"))); // NOI18N

        lFile.setText(bundle.getString("VisualizationWizard.lFile.txt")); // NOI18N

        txtFile.setText(bundle.getString("VisualizationWizard.txtFile.txt")); // NOI18N
        txtFile.setEnabled(false);

        btnFile.setText(bundle.getString("VisualizationWizard.btnFile.txt")); // NOI18N
        btnFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pFileChooserLayout = new javax.swing.GroupLayout(pFileChooser);
        pFileChooser.setLayout(pFileChooserLayout);
        pFileChooserLayout.setHorizontalGroup(
            pFileChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pFileChooserLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFile, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFile)
                .addContainerGap())
        );
        pFileChooserLayout.setVerticalGroup(
            pFileChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pFileChooserLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pFileChooserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lFile)
                    .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFile))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pAttributes.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("VisualizationWizard.lAttributes.txt"))); // NOI18N
        pAttributes.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout pWizard1Layout = new javax.swing.GroupLayout(pWizard1);
        pWizard1.setLayout(pWizard1Layout);
        pWizard1Layout.setHorizontalGroup(
            pWizard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pWizard1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pWizard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pFileChooser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pAttributes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE))
                .addContainerGap())
        );
        pWizard1Layout.setVerticalGroup(
            pWizard1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pWizard1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pAttributes, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                .addContainerGap())
        );

        pMain.add(pWizard1, "wizard1");

        javax.swing.GroupLayout pWizard2Layout = new javax.swing.GroupLayout(pWizard2);
        pWizard2.setLayout(pWizard2Layout);
        pWizard2Layout.setHorizontalGroup(
            pWizard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 666, Short.MAX_VALUE)
        );
        pWizard2Layout.setVerticalGroup(
            pWizard2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 573, Short.MAX_VALUE)
        );

        pMain.add(pWizard2, "wizard2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setVisible(false);
        ((CardLayout) pMain.getLayout()).show(pMain, "wizard1");
        btnBack.setEnabled(false);
        btnNext.setEnabled(true);
        btnFinish.setEnabled(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.addChoosableFileFilter(new FileNameExtensionFilter("ESRI Shapfile", "shp"));
        int retValue = jfc.showOpenDialog(this);

        if (retValue == JFileChooser.APPROVE_OPTION) {
            File file = jfc.getSelectedFile();
            if (file != null) {
                txtFile.setText(file.getAbsolutePath());
                ShapefileLoader shapefileLoader = new ShapefileLoader(file);
                shapefileLoader.execute();
            }
        } else {
            if (log.isDebugEnabled()) {
                log.debug("No shp file selected.");
            }
        }
    }//GEN-LAST:event_btnFileActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        ShapefileTableModel model = (ShapefileTableModel) tabAttributes.getModel();
        Boolean isSelected = false;
        int selectedRowID = 0;
        for (; selectedRowID < model.getRowCount(); selectedRowID++) {
            isSelected = (Boolean) model.getValueAt(selectedRowID, 0);
            if (!isSelected) {
                continue;
            } else {
                break;
            }
        }

        if (isSelected == false) {
            if (log.isDebugEnabled()) {
                log.debug("No attribute selected. "
                        + "Please select one attribute.");
            }
            JOptionPane.showMessageDialog(this, "No attribute selected. "
                    + "Please select one attribute.");
            return;
        }

        if (model.getValueAt(selectedRowID, 3) == null) {
            if (log.isDebugEnabled()) {
                log.debug("No visualization technique selected. "
                        + "Please select technique.");
            }
            JOptionPane.showMessageDialog(this, "No visualization technique selected. "
                    + "Please select technique.");
            return;
        }

        if (log.isDebugEnabled()) {
            log.debug("Selected attribute: {}", model.getValueAt(selectedRowID, 1));
            log.debug("Data type: {}", model.getValueAt(selectedRowID, 2));
            log.debug("Vis technique: {}", model.getValueAt(selectedRowID, 3));
        }

        ((CardLayout) pMain.getLayout()).show(pMain, "wizard2");
        btnBack.setEnabled(true);
        btnNext.setEnabled(false);
        btnFinish.setEnabled(true);
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        ((CardLayout) pMain.getLayout()).show(pMain, "wizard1");
        btnBack.setEnabled(false);
        btnNext.setEnabled(true);
        btnFinish.setEnabled(false);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishActionPerformed
        RenderableLayer layer = new RenderableLayer();
        layer.setName("test wizard layer");
        ((MainFrame) getParent()).wwPanel.addLayer(layer);
        this.setVisible(false);
        ((CardLayout) pMain.getLayout()).show(pMain, "wizard1");
        btnBack.setEnabled(false);
        btnNext.setEnabled(true);
        btnFinish.setEnabled(false);
    }//GEN-LAST:event_btnFinishActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VisualizationWizard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VisualizationWizard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VisualizationWizard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VisualizationWizard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                VisualizationWizard dialog = new VisualizationWizard(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnFile;
    private javax.swing.JButton btnFinish;
    private javax.swing.JButton btnNext;
    private javax.swing.JLabel lFile;
    private javax.swing.JPanel pAttributes;
    private javax.swing.JPanel pButtons;
    private javax.swing.JPanel pFileChooser;
    private javax.swing.JPanel pMain;
    private javax.swing.JPanel pWizard1;
    private javax.swing.JPanel pWizard2;
    private javax.swing.JTextField txtFile;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @author Daniel Steffen <daniel.steffen at dfki.de>
     */
    public class ShapefileLoader extends SwingWorker<List<Entry<String, Object>>, Void> {

        /*
         * Logger.
         */
        private final Logger log = LoggerFactory.getLogger(getClass());
        private File file;

        public ShapefileLoader(File file) {
            this.file = file;
        }

        @Override
        protected List<Entry<String, Object>> doInBackground() throws Exception {
            ArrayList<Entry<String, Object>> list = new ArrayList<Entry<String, Object>>();
            Shapefile shapefile = new Shapefile(file);
            if (shapefile.hasNext()) {
                ShapefileRecord record = shapefile.nextRecord();
                Set<Entry<String, Object>> set = record.getAttributes().getEntries();
                for (Entry<String, Object> entry : set) {
                    if (entry.getValue() != null) {
                        list.add(entry);
                    } else {
                        if (log.isDebugEnabled()) {
                            log.debug("Skipping entry: {}", entry.getKey());
                        }
                    }
                }
            }
            return list;
        }

        @Override
        protected void done() {
            try {
                List<Entry<String, Object>> attributeList = get();
                TableModel tModel = tabAttributes.getModel();
                if (tModel instanceof ShapefileTableModel) {
                    ShapefileTableModel model = (ShapefileTableModel) tModel;
                    model.removeAllRows();
                    for (Entry<String, Object> value : attributeList) {
                        Object[] rowData = new Object[model.getColumnCount()];
                        rowData[0] = false;
                        rowData[1] = value.getKey();
                        rowData[2] = value.getValue().getClass().getSimpleName();
                        model.addRow(rowData);
                    }
                }
                tabAttributes.updateUI();
                btnNext.setEnabled(true);
            } catch (InterruptedException ex) {
                if (log.isErrorEnabled()) {
                    log.error(ex.toString());
                }
            } catch (ExecutionException ex) {
                if (log.isErrorEnabled()) {
                    log.error(ex.toString());
                }
            }
        }
    }
}
