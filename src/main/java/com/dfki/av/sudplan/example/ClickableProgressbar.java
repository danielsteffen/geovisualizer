/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClickableProgressbar.java
 *
 * Created on 21.02.2011, 09:05:12
 */
package com.dfki.av.sudplan.example;

import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.JProgressBar;
import javax.swing.JSlider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Sebastian Puhl
 */
public class ClickableProgressbar extends javax.swing.JPanel implements MouseListener,MouseMotionListener {

    /** Creates new form ClickableProgressbar */
    public ClickableProgressbar() {
        initComponents();      
        progressbar.addMouseListener(this);
        progressbar.addMouseMotionListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressbar = new JClickableProgressbar();
        jButton1 = new javax.swing.JButton();

        progressbar.setMaximum(500);

        jButton1.setText("Initalise");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(890, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(43, 43, 43)
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(209, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        progressbar.setMinimum(0);
        progressbar.setMaximum(progressbar.getWidth());
//        progressSlider.setMinimum(0);
//        progressSlider.setMaximum(progressbar.getWidth());
//        progressSlider.setValue(0);
        progressbar.setValue(0);
        progressbar.setStringPainted(true);        
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JProgressBar progressbar;
    // End of variables declaration//GEN-END:variables
    private final Logger logger = LoggerFactory.getLogger(ClickableProgressbar.class);

    @Override
    public void mouseClicked(MouseEvent e) {
        if (logger.isDebugEnabled()) {
            logger.debug("clicked");
        }
        final double mouseX = e.getX();
        final String progress = (int)((mouseX/progressbar.getWidth())*100) +"%";
        if (logger.isDebugEnabled()) {
            logger.debug("mouseX: " + mouseX + " width: " + progressbar.getWidth());
            logger.debug(progress);
        }
        progressbar.setValue((int)mouseX);
        progressbar.setString(progress);
//        progressSlider.setValue((int)mouseX);
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        if (logger.isDebugEnabled()) {
            logger.debug("entered");
        }
    }

    @Override
    public void mouseExited(MouseEvent e) {
        if (logger.isDebugEnabled()) {
            logger.debug("exited");
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
//        mouseClicked(e);
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if (logger.isDebugEnabled()) {
            logger.debug("released");
        }
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        if (logger.isDebugEnabled()) {
            logger.debug("dragged");
        }
        mouseClicked(e);
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }

    public class JClickableProgressbar extends JProgressBar{

        private JSlider slider = new JSlider();

        public JClickableProgressbar() {
        }

        @Override
        public void setMinimum(int n) {
            super.setMinimum(n);
            slider.setMinimum(n);
        }

        @Override
        public void setMaximum(int n) {
            super.setMaximum(n);
            slider.setMaximum(n);
        }

        @Override
        public void setValue(int n) {
            super.setValue(n);
            slider.setValue(n);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            slider.paintComponents(g);
        }        
    }
}
